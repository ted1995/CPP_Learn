#include<iostream>
#include<vector>
using namespace std;


class Solution {
public:
	int numTrees(int n)
	{
		//二叉搜索树为左节点小于根结点小于右节点
		//因此对于有序数组，选取任一个元素作为根结点，则这个元素左右两边的元素自动成为二叉搜索树左子树和右子树的元素。
		//1个元素的二叉搜索树只有1种,计为f(1)=1;
		//2个元素的二叉搜索树只有2种,记为f(2)=2;
		//对于三个元素的组合，可以拆分：
			//以第一个元素为根结点，则二叉搜索树的左边有0个元素，右边有2个元素
			//以第二个元素为根结点，则二叉搜索树左右两边各有一个元素
			//以第三个元素为根结点，则二叉搜索树左边有2个元素，右边有0个元素
		//所以f(3)=f(0)*f(2)+f(1)*f(1)+f(2)*f(0),多元素可以分解为更少元素的组合
		//递推找规律。
		vector<int> res(n);
		//res[0]为方便递推计算，设置为0
		if (n == 0)
		{
			return 0;
		}
		if (n == 1)
		{
			return 1;
		}
		vector<int> f(n + 1);
		f[0] = 1;
		f[1] = 1;
		//计算n个元素的种类f(n)，则需要计算出n之前的所有种类
		//从f(2)开始一直计算到f(n)
		//外循环遍历要计算的2~n，i控制计算下标
		for (int i = 2; i <= n; i++)
		{
			//内循环进行f(i)的递归计算,j控制递推下标
			for (int j = 0; j < i; j++)
			{
				f[i] += f[j] * f[i - 1 - j];
			}
		}
		return f[n];
	}
};


